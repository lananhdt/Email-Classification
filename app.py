# app.py
import os
import json
import time
import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.manifold import TSNE

# ====== Model & utils (gi·ªØ import nh∆∞ b·∫°n d√πng tr∆∞·ªõc ƒë√≥) ======
from email_handler import tfidf_classifier, embedding_classifier
from email_handler.data_loader import load_data
from email_handler.corrections_handler import (
    count_corrections,
    save_correction,
    get_corrections_df,
)

# D√πng tr·ª±c ti·∫øp c√°c h√†m d·ª± ƒëo√°n n·∫øu b·∫°n ƒë√£ ƒë·ªÉ ·ªü root
try:
    from tfidf_classifier import predict_tfidf  # baseline TF-IDF
except Exception:
    predict_tfidf = None

try:
    from embedding_classifier import predict_embedding  # E5+FAISS
except Exception:
    predict_embedding = None

# Gmail
from gmail_handler import get_gmail_service, get_email_list

# ================== PAGE CONFIG & THEME ==================
st.set_page_config(page_title="Email Classifier", layout="wide", page_icon="üìß")

# CSS nh·∫π cho dark glassy UI
st.markdown("""
<style>
/* Ti√™u ƒë·ªÅ gradient */
.big-title {
  font-size: 44px; font-weight: 800;
  background: linear-gradient(90deg,#a7f3d0,#22c55e);
  -webkit-background-clip: text; -webkit-text-fill-color: transparent;
  margin: 0 0 4px 0;
}
.subtitle { color: #cbd5e1; font-size: 16px; margin-bottom: 24px; }
.metric-note { font-size: 12px; color: #86efac; }
.btn-grid .stButton>button {
  width: 100%; padding: 12px 16px; border-radius: 16px; font-weight: 600;
}
.card {
  background: rgba(255,255,255,0.03); border: 1px solid rgba(255,255,255,0.08);
  border-radius: 18px; padding: 16px;
}
</style>
""", unsafe_allow_html=True)

# ================== SESSION STATE ==================
if "page" not in st.session_state:
    st.session_state.page = "üè† Trang ch·ªß"

def goto(p): st.session_state.page = p

# ================== DATA ==================
# B·∫°n c√≥ th·ªÉ ƒë·ªïi ƒë∆∞·ªùng d·∫´n t√πy repo
DATA_PATH = "data/emails.csv"
try:
    df = load_data(DATA_PATH)
except Exception as e:
    st.warning(f"Kh√¥ng th·ªÉ load d·ªØ li·ªáu t·ª´ {DATA_PATH}: {e}")
    df = pd.DataFrame(columns=["text","label"])

# ================== NAVIGATION (sidebar) ==================
st.sidebar.title("üìå MENU")
side_choice = st.sidebar.radio(
    "ƒêi·ªÅu h∆∞·ªõng",
    ["üè† Trang ch·ªß", "üìä T·ªïng quan & Th·ªëng k√™", "üîç Ph√¢n t√≠ch & t-SNE",
     "üß™ ƒê√°nh gi√° m√¥ h√¨nh", "üìß Gmail & Corrections"]
)
st.session_state.page = side_choice

# ================== HOMEPAGE ==================
def home():
    st.markdown('<div class="big-title">Email Classifier</div>', unsafe_allow_html=True)
    st.markdown('<div class="subtitle">Kh√°m ph√° v√† ph√¢n lo·∫°i email v·ªõi giao di·ªán t∆∞∆°ng t√°c!</div>', unsafe_allow_html=True)

    total = len(df)
    spam_count = int((df["label"] == "spam").sum()) if "label" in df else 0
    ham_count  = int((df["label"] == "ham").sum()) if "label" in df else 0
    try:
        corrections = count_corrections()
    except Exception:
        corrections = 0

    c1,c2,c3,c4 = st.columns(4)
    with c1: st.metric("T·ªïng s·ªë Email", f"{total:,}")
    with c2: st.metric("Email Spam", f"{spam_count:,}", "‚Üë") ; st.caption(" ")
    with c3: st.metric("Email Ham", f"{ham_count:,}", "‚Üë"); st.caption(" ")
    with c4: st.metric("Corrections", f"{corrections:,}")

    st.markdown("#### T√≠nh nƒÉng")
    cA,cB,cC,cD = st.columns([1,1,1,1])
    with cA:
        if st.button("üî¨ Ph√¢n t√≠ch D·ªØ li·ªáu", use_container_width=True): goto("üîç Ph√¢n t√≠ch & t-SNE")
    with cB:
        if st.button("üß™ ƒê√°nh gi√° B·ªô ph√¢n lo·∫°i", use_container_width=True): goto("üß™ ƒê√°nh gi√° m√¥ h√¨nh")
    with cC:
        if st.button("üìß Qu√©t Gmail", use_container_width=True): goto("üìß Gmail & Corrections")
    with cD:
        if st.button("üìù Qu·∫£n l√Ω Corrections", use_container_width=True): goto("üìß Gmail & Corrections")

# ================== PAGE: OVERVIEW ==================
def page_overview():
    st.header("üìä T·ªïng quan & Th·ªëng k√™")
    if df.empty:
        st.info("Dataset tr·ªëng.")
        return

    st.subheader("B·∫£ng d·ªØ li·ªáu (5 d√≤ng ƒë·∫ßu)")
    st.dataframe(df.head())

    st.subheader("Ph√¢n ph·ªëi Spam/Ham")
    fig, ax = plt.subplots()
    sns.countplot(x="label", data=df, ax=ax)
    ax.set_xlabel("Label"); ax.set_ylabel("Count")
    st.pyplot(fig)

# ================== PAGE: ANALYSIS & TSNE ==================
def page_analysis_tsne():
    st.header("üîç Ph√¢n t√≠ch d·ªØ li·ªáu & t-SNE")

    if df.empty:
        st.info("Dataset tr·ªëng.")
        return

    st.subheader("Gi·∫£m chi·ªÅu v·ªõi t-SNE (demo tr√™n TF-IDF 200 features)")
    sample = df.sample(min(1000, len(df)), random_state=42) if len(df) > 0 else df

    if not sample.empty:
        from sklearn.feature_extraction.text import TfidfVectorizer
        X = TfidfVectorizer(max_features=200).fit_transform(sample["text"])
        X_emb = TSNE(n_components=2, random_state=42, init="random", perplexity=30).fit_transform(X.toarray())

        fig, ax = plt.subplots()
        sns.scatterplot(x=X_emb[:,0], y=X_emb[:,1], hue=sample["label"], ax=ax, palette="Set1", s=18)
        ax.set_xlabel("t-SNE 1"); ax.set_ylabel("t-SNE 2"); ax.legend(loc="best")
        st.pyplot(fig)
    else:
        st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ v·∫Ω t-SNE.")

# ================== HELPERS: DRAW CM HEATMAP ==================
def draw_cm(cm, labels=("ham","spam"), title="Confusion Matrix"):
    fig, ax = plt.subplots()
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
                xticklabels=labels, yticklabels=labels, cbar=False, ax=ax)
    ax.set_xlabel("Predicted"); ax.set_ylabel("True"); ax.set_title(title)
    st.pyplot(fig)

# ================== PAGE: EVALUATION ==================
def page_evaluate_models():
    st.header("üß™ ƒê√°nh gi√° m√¥ h√¨nh")

    # ---- TF-IDF + SVM ----
    st.subheader("TF-IDF + SVM (LinearSVC) ‚Äî baseline")
    try:
        report_svm, cm_svm = tfidf_classifier.evaluate_svm()
        st.text(report_svm)
        draw_cm(cm_svm, title="TF-IDF + SVM")
    except Exception as e:
        st.error(f"L·ªói evaluate_svm(): {e}")

    # ---- Naive Bayes ----
    st.subheader("Naive Bayes (MultinomialNB)")
    try:
        report_nb, cm_nb = tfidf_classifier.evaluate_naive_bayes()
        st.text(report_nb)
        draw_cm(cm_nb, title="Naive Bayes")
    except Exception as e:
        st.error(f"L·ªói evaluate_naive_bayes(): {e}")

    # ---- KNN + FAISS + E5 ----
    st.subheader("KNN + FAISS + E5 Embedding (k ‚àà {1,3,5})")
    k_list = [1,3,5]
    try:
        # K·ª≥ v·ªçng module c√≥ s·∫µn evaluate_knn(k_list) ‚Üí (df_metrics, best_k, cms_by_k)
        eval_out = embedding_classifier.evaluate_knn(k_list=k_list)
        if isinstance(eval_out, tuple) and len(eval_out) >= 2:
            metrics_df = eval_out[0]
            best_k = eval_out[1]
            cms_by_k = eval_out[2] if len(eval_out) > 2 else {}

            st.write("B·∫£ng metrics theo k:")
            st.dataframe(metrics_df)

            # Lineplot cho m·ªói metric theo k
            melt_df = metrics_df.melt(id_vars=["k"], var_name="metric", value_name="score")
            fig, ax = plt.subplots()
            sns.lineplot(data=melt_df, x="k", y="score", hue="metric", marker="o", ax=ax)
            ax.set_title("KNN metrics theo k"); ax.set_ylabel("Score"); ax.set_xlabel("k")
            st.pyplot(fig)

            # So s√°nh TF-IDF vs KNN-best-k b·∫±ng Accuracy/Precision/Recall/F1
            try:
                # L·∫•y t·ª´ report SVM (sklearn classification_report -> text); b·∫°n c√≥ th·ªÉ
                # thay b·∫±ng tfidf_classifier.get_metrics_svm() n·∫øu ƒë√£ c√≥.
                # ·ªû ƒë√¢y demo: gi·∫£ s·ª≠ metrics_df c√≥ h√†ng TFIDF
                tfidf_row = None
                if "model" in metrics_df.columns:
                    tfidf_row = metrics_df[metrics_df["model"]=="TFIDF_SVM"].iloc[0].to_dict()
                # fallback: l·∫•y d√≤ng k==best_k cho KNN
                knn_best = metrics_df[metrics_df["k"]==best_k].iloc[0]

                comp = pd.DataFrame([
                    {"model":"TFIDF+SVM","Accuracy":tfidf_row.get("accuracy") if tfidf_row else np.nan,
                     "Precision":tfidf_row.get("precision") if tfidf_row else np.nan,
                     "Recall":tfidf_row.get("recall") if tfidf_row else np.nan,
                     "F1":tfidf_row.get("f1") if tfidf_row else np.nan},
                    {"model":f"KNN (k={best_k})","Accuracy":knn_best.get("accuracy"),
                     "Precision":knn_best.get("precision"),
                     "Recall":knn_best.get("recall"),
                     "F1":knn_best.get("f1")}
                ])
                st.write("So s√°nh TF-IDF vs KNN best-k:")
                st.dataframe(comp)

                fig, ax = plt.subplots()
                comp_melt = comp.melt(id_vars=["model"], var_name="metric", value_name="score")
                sns.barplot(data=comp_melt, x="metric", y="score", hue="model", ax=ax)
                ax.set_title("TF-IDF vs KNN best-k"); ax.set_ylim(0,1)
                st.pyplot(fig)
            except Exception as e:
                st.info(f"Kh√¥ng th·ªÉ d·ª±ng bi·ªÉu ƒë·ªì so s√°nh TF-IDF vs KNN: {e}")

            # V·∫Ω CM cho t·ª´ng k n·∫øu c√≥
            for k in k_list:
                if isinstance(cms_by_k, dict) and k in cms_by_k:
                    draw_cm(cms_by_k[k], title=f"KNN (k={k}) ‚Äî Confusion Matrix")

        else:
            st.warning("embedding_classifier.evaluate_knn(k_list) ch∆∞a tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng.")
    except Exception as e:
        st.error(f"L·ªói khi evaluate KNN: {e}")
        st.caption("B·∫°n c√≥ th·ªÉ b·ªï sung h√†m `evaluate_knn(k_list)` trong embedding_classifier ƒë·ªÉ tr·∫£ v·ªÅ (metrics_df, best_k, cms_by_k).")

# ================== PAGE: GMAIL & CORRECTIONS ==================
def page_gmail_and_corrections():
    st.header("üìß Gmail & Corrections")

    st.markdown("**Lu·ªìng:** OAuth ‚Üí Qu√©t email ‚Üí Ph√¢n lo·∫°i ‚Üí G√°n nh√£n SPAM/INBOX ‚Üí S·ª≠a nh√£n ‚Üí L∆∞u `corrections.json`")

    colA,colB = st.columns([1,1])
    model_choice = colA.selectbox("Ch·ªçn m√¥ h√¨nh ph√¢n lo·∫°i", ["TF-IDF + SVM", "KNN + E5 Embedding"])
    max_emails = colB.slider("S·ªë email t·ªëi ƒëa c·∫ßn qu√©t", 5, 50, 10)

    if st.button("üîê K·∫øt n·ªëi Gmail & Qu√©t"):
        try:
            service = get_gmail_service()
            emails = get_gmail_list_with_ids_safe(service, max_emails)

            if not emails:
                st.info("Kh√¥ng l·∫•y ƒë∆∞·ª£c email n√†o.")
                return

            st.success(f"ƒê√£ l·∫•y {len(emails)} email.")
            for i, item in enumerate(emails, 1):
                msg_id = item.get("id")
                text = item.get("snippet","")

                with st.expander(f"Email {i} ‚Äî id: {msg_id}"):
                    st.write(text)

                    # Ph√¢n lo·∫°i
                    pred = "unknown"
                    try:
                        if model_choice.startswith("TF-IDF") and predict_tfidf:
                            pred = predict_tfidf(text)
                        elif predict_embedding:
                            pred = predict_embedding(text)
                    except Exception as e:
                        st.error(f"L·ªói ph√¢n lo·∫°i: {e}")

                    st.write(f"**K·∫øt qu·∫£:** `{pred}`")

                    # G√°n nh√£n / chuy·ªÉn h·ªôp th∆∞ (n·∫øu gmail_handler ƒë√£ c√≥ h√†m)
                    cc1, cc2, cc3 = st.columns([1,1,1])
                    if cc1.button("üè∑Ô∏è G√°n label AI_CORRECTED", key=f"lab_{msg_id}"):
                        try:
                            from gmail_handler import ensure_label, add_label
                            lid = ensure_label(service, "AI_CORRECTED")
                            add_label(service, msg_id, lid)
                            st.success("ƒê√£ g√°n label AI_CORRECTED.")
                        except Exception as e:
                            st.warning(f"Ch∆∞a h·ªó tr·ª£ g√°n label: {e}")

                    if cc2.button("üóÇÔ∏è Chuy·ªÉn INBOX", key=f"inb_{msg_id}"):
                        try:
                            from gmail_handler import move_message
                            move_message(service, msg_id, to_spam=False)
                            st.success("ƒê√£ chuy·ªÉn v·ªÅ INBOX.")
                        except Exception as e:
                            st.warning(f"Ch∆∞a h·ªó tr·ª£ chuy·ªÉn INBOX: {e}")

                    if cc3.button("üßπ Chuy·ªÉn SPAM", key=f"spm_{msg_id}"):
                        try:
                            from gmail_handler import move_message
                            move_message(service, msg_id, to_spam=True)
                            st.success("ƒê√£ chuy·ªÉn sang SPAM.")
                        except Exception as e:
                            st.warning(f"Ch∆∞a h·ªó tr·ª£ chuy·ªÉn SPAM: {e}")

                    # Correction th·ªß c√¥ng
                    st.markdown("**S·ª≠a nh√£n (Correction):**")
                    new_label = st.radio(
                        "Ch·ªçn nh√£n ƒë√∫ng", ["spam","ham"], key=f"corr_{msg_id}", horizontal=True
                    )
                    if st.button("üíæ L∆∞u Correction", key=f"save_{msg_id}"):
                        try:
                            save_correction(text, new_label)
                            st.success("ƒê√£ l∆∞u correction.")
                        except Exception as e:
                            st.error(f"L·ªói l∆∞u correction: {e}")

        except Exception as e:
            st.error(f"L·ªói Gmail: {e}")
            st.info("ƒê·∫£m b·∫£o c√≥ `credentials.json` v√† ƒë√£ b·∫≠t Gmail API.")

    st.markdown("---")
    st.subheader("üìã Corrections ƒë√£ l∆∞u")
    try:
        st.dataframe(get_corrections_df())
    except Exception as e:
        st.info(f"Ch∆∞a c√≥ corrections: {e}")

# ---- helper: c·ªë l·∫•y c·∫£ id l·∫´n snippet d√π gmail_handler c≈© ch·ªâ tr·∫£ snippet
def get_gmail_list_with_ids_safe(service, max_results=10):
    """
    ∆Øu ti√™n d√πng gmail_handler.get_email_list (n·∫øu ƒë√£ tr·∫£ v·ªÅ list[dict]),
    n·∫øu ch·ªâ tr·∫£ snippet -> t·ª± list ƒë·ªÉ l·∫•y id.
    Tr·∫£ v·ªÅ: list of dict {id, snippet}
    """
    items = []
    try:
        from gmail_handler import get_email_list_with_ids
        items = get_email_list_with_ids(service, max_results=max_results)
        if isinstance(items, list) and items and isinstance(items[0], dict):
            return items
    except Exception:
        pass

    # Fallback: d√πng API tr·ª±c ti·∫øp
    try:
        results = service.users().messages().list(userId='me', maxResults=max_results).execute()
        messages = results.get('messages', [])
        out = []
        for m in messages:
            msg = service.users().messages().get(userId='me', id=m["id"]).execute()
            out.append({"id": m["id"], "snippet": msg.get("snippet","")})
        return out
    except Exception:
        # Fallback n·ªØa: d√πng get_email_list c≈© -> ch·ªâ snippet
        try:
            snippets = get_email_list(service, max_results=max_results)
            return [{"id": None, "snippet": s} for s in snippets]
        except Exception:
            return []

# ================== ROUTER ==================
if st.session_state.page == "üè† Trang ch·ªß":
    home()
elif st.session_state.page == "üìä T·ªïng quan & Th·ªëng k√™":
    page_overview()
elif st.session_state.page == "üîç Ph√¢n t√≠ch & t-SNE":
    page_analysis_tsne()
elif st.session_state.page == "üß™ ƒê√°nh gi√° m√¥ h√¨nh":
    page_evaluate_models()
elif st.session_state.page == "üìß Gmail & Corrections":
    page_gmail_and_corrections()
